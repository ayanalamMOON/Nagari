name: Release Binary Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.3.0)'
        required: true
        default: 'v0.3.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
            extension: .exe
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
            extension: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz
            extension: ""
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
            extension: ""
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz
            extension: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
            extension: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
        
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build nagari-runtime (npm package)
      run: |
        cd nagari-runtime
        npm install
        npm run build
        
    - name: Build CLI binary
      run: |
        cargo build --release --bin nag --target ${{ matrix.target }}
        
    - name: Build LSP server binary  
      run: |
        cargo build --release --bin nagari-lsp --target ${{ matrix.target }}
        
    - name: Create release directory
      run: |
        mkdir -p release/nagari-${{ github.ref_name }}-${{ matrix.target }}
        
    - name: Copy binaries (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/nag${{ matrix.extension }} release/nagari-${{ github.ref_name }}-${{ matrix.target }}/
        cp target/${{ matrix.target }}/release/nagari-lsp${{ matrix.extension }} release/nagari-${{ github.ref_name }}-${{ matrix.target }}/
        
    - name: Copy binaries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\nag${{ matrix.extension }} release\nagari-${{ github.ref_name }}-${{ matrix.target }}\
        copy target\${{ matrix.target }}\release\nagari-lsp${{ matrix.extension }} release\nagari-${{ github.ref_name }}-${{ matrix.target }}\
        
    - name: Copy additional files
      run: |
        cp README.md release/nagari-${{ github.ref_name }}-${{ matrix.target }}/
        cp LICENSE release/nagari-${{ github.ref_name }}-${{ matrix.target }}/
        cp CHANGELOG.md release/nagari-${{ github.ref_name }}-${{ matrix.target }}/
        
    - name: Copy standard library
      run: |
        cp -r stdlib release/nagari-${{ github.ref_name }}-${{ matrix.target }}/
        
    - name: Copy runtime package
      run: |
        cp -r nagari-runtime/dist release/nagari-${{ github.ref_name }}-${{ matrix.target }}/runtime
        cp nagari-runtime/package.json release/nagari-${{ github.ref_name }}-${{ matrix.target }}/runtime/
        
    - name: Create installation script (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cat > release/nagari-${{ github.ref_name }}-${{ matrix.target }}/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "ðŸš€ Installing Nagari Programming Language..."
        
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        
        # Create installation directory
        INSTALL_DIR="${HOME}/.nagari"
        BIN_DIR="${INSTALL_DIR}/bin"
        STDLIB_DIR="${INSTALL_DIR}/stdlib"
        RUNTIME_DIR="${INSTALL_DIR}/runtime"
        
        mkdir -p "${BIN_DIR}" "${STDLIB_DIR}" "${RUNTIME_DIR}"
        
        # Copy binaries
        cp nag "${BIN_DIR}/"
        cp nagari-lsp "${BIN_DIR}/"
        chmod +x "${BIN_DIR}/nag" "${BIN_DIR}/nagari-lsp"
        
        # Copy standard library and runtime
        cp -r stdlib/* "${STDLIB_DIR}/"
        cp -r runtime/* "${RUNTIME_DIR}/"
        
        # Add to PATH
        echo ""
        echo "âœ… Nagari installed successfully!"
        echo ""
        echo "Add the following to your shell profile (~/.bashrc, ~/.zshrc, etc.):"
        echo "export PATH=\"\$HOME/.nagari/bin:\$PATH\""
        echo ""
        echo "Then restart your shell or run:"
        echo "source ~/.bashrc  # or your shell's config file"
        echo ""
        echo "Verify installation:"
        echo "nag --version"
        EOF
        chmod +x release/nagari-${{ github.ref_name }}-${{ matrix.target }}/install.sh
        
    - name: Create installation script (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $installScript = @"
        @echo off
        echo ðŸš€ Installing Nagari Programming Language...
        
        REM Create installation directory
        set "INSTALL_DIR=%USERPROFILE%\.nagari"
        set "BIN_DIR=%INSTALL_DIR%\bin"
        set "STDLIB_DIR=%INSTALL_DIR%\stdlib"
        set "RUNTIME_DIR=%INSTALL_DIR%\runtime"
        
        if not exist "%BIN_DIR%" mkdir "%BIN_DIR%"
        if not exist "%STDLIB_DIR%" mkdir "%STDLIB_DIR%"
        if not exist "%RUNTIME_DIR%" mkdir "%RUNTIME_DIR%"
        
        REM Copy binaries
        copy nag.exe "%BIN_DIR%\"
        copy nagari-lsp.exe "%BIN_DIR%\"
        
        REM Copy standard library and runtime
        xcopy /E /I stdlib "%STDLIB_DIR%"
        xcopy /E /I runtime "%RUNTIME_DIR%"
        
        echo.
        echo âœ… Nagari installed successfully!
        echo.
        echo Add the following directory to your PATH:
        echo %BIN_DIR%
        echo.
        echo Verify installation:
        echo nag --version
        "@
        $installScript | Out-File -FilePath "release\nagari-${{ github.ref_name }}-${{ matrix.target }}\install.bat" -Encoding ASCII
        
    - name: Create archive (tar.gz)
      if: matrix.archive == 'tar.gz'
      run: |
        cd release
        tar -czf nagari-${{ github.ref_name }}-${{ matrix.target }}.tar.gz nagari-${{ github.ref_name }}-${{ matrix.target }}
        
    - name: Create archive (zip)
      if: matrix.archive == 'zip'
      run: |
        cd release
        7z a nagari-${{ github.ref_name }}-${{ matrix.target }}.zip nagari-${{ github.ref_name }}-${{ matrix.target }}
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: nagari-${{ github.ref_name }}-${{ matrix.target }}
        path: release/nagari-${{ github.ref_name }}-${{ matrix.target }}.*

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Generate release notes
      id: release_notes
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract the latest version's changes from CHANGELOG.md
          VERSION="${{ github.ref_name }}"
          awk "/^## \[?${VERSION#v}/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > release_notes.md || echo "## What's New in $VERSION" > release_notes.md
        else
          echo "## What's New in ${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Features" >> release_notes.md
          echo "- Cross-platform binary releases for Windows, macOS, and Linux" >> release_notes.md
          echo "- Complete Nagari CLI toolchain" >> release_notes.md
          echo "- LSP server for editor integration" >> release_notes.md
          echo "- Standard library and runtime included" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "1. Download the appropriate archive for your platform" >> release_notes.md
          echo "2. Extract the archive" >> release_notes.md
          echo "3. Run the installation script (install.sh on Unix, install.bat on Windows)" >> release_notes.md
          echo "4. Add the bin directory to your PATH" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Verification" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo 'nag --version' >> release_notes.md
          echo '```' >> release_notes.md
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Nagari ${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Build and publish nagari-runtime
      run: |
        cd nagari-runtime
        npm install
        npm run build
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
