name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build nagari-runtime
      run: |
        cd nagari-runtime
        npm install
        npm run build

    - name: Run Rust tests
      run: cargo test --workspace

    - name: Run Rust clippy
      run: cargo clippy --workspace -- -D warnings

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Build CLI binary
      run: cargo build --release --bin nag

    - name: Build LSP server binary
      run: cargo build --release --bin nagari-lsp

    - name: Test CLI functionality (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./target/release/nag --version
        echo 'print("Hello from CI test!")' > test_ci.nag
              - name: Test CLI binary
        run: |
          ./target/release/nag build test_ci.nag

    - name: Test CLI functionality (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\target\release\nag.exe --version
        echo 'print("Hello from CI test!")' > test_ci.nag
        .\target\release\nag.exe compile test_ci.nag

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --workspace

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Generate documentation
      run: cargo doc --workspace --no-deps

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc
