def fibonacci_recursive(n: int) -> int:
    if n <= 1:
        return n
    else:
        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)

def fibonacci_iterative(n: int) -> int:
    if n <= 1:
        return n
    a = 0
    b = 1
    i = 2
    while i <= n:
        temp = a + b
        a = b
        b = temp
        i = i + 1
    return b

def fibonacci_optimized(n: int) -> int:
    if n <= 1:
        return n
    if n == 2:
        return 1
    prev2 = 0
    prev1 = 1
    current = 1
    i = 3
    while i <= n:
        prev2 = prev1
        prev1 = current
        current = prev1 + prev2
        i = i + 1
    return current

def test_all_implementations():
    print("=== Complete Fibonacci Algorithm Test ===")
    print("")
    test_inputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15]
    test_expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 144, 610]
    recursive_passed = 0
    iterative_passed = 0
    optimized_passed = 0
    total_tests = len(test_inputs)
    print("Testing Recursive Implementation:")
    print("-" * 50)
    i = 0
    while i < len(test_inputs):
        n = test_inputs[i]
        expected = test_expected[i]
        if n <= 10:
            result = fibonacci_recursive(n)
            if result == expected:
                print("PASS: recursive fib(" + str(n) + ") = " + str(result))
                recursive_passed = recursive_passed + 1
            else:
                print("FAIL: recursive fib(" + str(n) + ") = " + str(result) + ", expected " + str(expected))
        i = i + 1
    print("")
    print("Testing Iterative Implementation:")
    print("-" * 50)
    i = 0
    while i < len(test_inputs):
        n_val = test_inputs[i]
        expected_val = test_expected[i]
        result_iter = fibonacci_iterative(n_val)
        if result_iter == expected_val:
            print("PASS: iterative fib(" + str(n_val) + ") = " + str(result_iter))
            iterative_passed = iterative_passed + 1
        else:
            print("FAIL: iterative fib(" + str(n_val) + ") = " + str(result_iter) + ", expected " + str(expected_val))
        i = i + 1
    print("")
    print("Testing Optimized Implementation:")
    print("-" * 50)
    i = 0
    while i < len(test_inputs):
        n_opt = test_inputs[i]
        expected_opt = test_expected[i]
        result_opt = fibonacci_optimized(n_opt)
        if result_opt == expected_opt:
            print("PASS: optimized fib(" + str(n_opt) + ") = " + str(result_opt))
            optimized_passed = optimized_passed + 1
        else:
            print("FAIL: optimized fib(" + str(n_opt) + ") = " + str(result_opt) + ", expected " + str(expected_opt))
        i = i + 1
    return recursive_passed + iterative_passed + optimized_passed

def main():
    print("Starting Complete Fibonacci Algorithm Test Suite")
    print("=" * 60)
    implementations_passed = test_all_implementations()
    print("")
    print("=" * 60)
    print("FINAL TEST SUMMARY")
    print("=" * 60)
    print("Total tests passed: " + str(implementations_passed))
    print("")
    if implementations_passed >= 30:
        print("SUCCESS: Comprehensive Fibonacci testing completed!")
        print("All implementations working correctly.")
    else:
        print("WARNING: Some tests failed. Review results above.")
    print("")
    print("Testing concluded.")

main()
