{"file":"fibonacci_complete_suite.js","mappings":"AAAA","sources":["fibonacci_complete_suite.nag"],"sourcesContent":["def fibonacci_recursive(n: int) -> int:\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\r\n\r\ndef fibonacci_iterative(n: int) -> int:\r\n    if n <= 1:\r\n        return n\r\n\r\n    a = 0\r\n    b = 1\r\n    i = 2\r\n    while i <= n:\r\n        temp = a + b\r\n        a = b\r\n        b = temp\r\n        i = i + 1\r\n    return b\r\n\r\ndef fibonacci_optimized(n: int) -> int:\r\n    if n <= 1:\r\n        return n\r\n\r\n    if n == 2:\r\n        return 1\r\n\r\n    prev2 = 0\r\n    prev1 = 1\r\n    current = 1\r\n\r\n    i = 3\r\n    while i <= n:\r\n        prev2 = prev1\r\n        prev1 = current\r\n        current = prev1 + prev2\r\n        i = i + 1\r\n\r\n    return current\r\n\r\ndef test_all_implementations():\r\n    print(\"=== Complete Fibonacci Algorithm Test ===\")\r\n    print(\"\")\r\n\r\n    # Using arrays instead of tuples since transpiler doesn't support tuples\r\n    test_inputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15]\r\n    test_expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 144, 610]\r\n\r\n    recursive_passed = 0\r\n    iterative_passed = 0\r\n    optimized_passed = 0\r\n    total_tests = len(test_inputs)\r\n\r\n    print(\"Testing Recursive Implementation:\")\r\n    print(\"-\" * 50)\r\n\r\n    i = 0\r\n    while i < len(test_inputs):\r\n        n = test_inputs[i]\r\n        expected = test_expected[i]\r\n\r\n        if n <= 10:\r\n            result = fibonacci_recursive(n)\r\n            if result == expected:\r\n                print(\"PASS: recursive fib(\" + str(n) + \") = \" + str(result))\r\n                recursive_passed = recursive_passed + 1\r\n            else:\r\n                print(\"FAIL: recursive fib(\" + str(n) + \") = \" + str(result) + \", expected \" + str(expected))\r\n        i = i + 1\r\n\r\n    print(\"\")\r\n    print(\"Testing Iterative Implementation:\")\r\n    print(\"-\" * 50)\r\n\r\n    i = 0\r\n    while i < len(test_inputs):\r\n        n = test_inputs[i]\r\n        expected = test_expected[i]\r\n        result = fibonacci_iterative(n)\r\n\r\n        if result == expected:\r\n            print(\"PASS: iterative fib(\" + str(n) + \") = \" + str(result))\r\n            iterative_passed = iterative_passed + 1\r\n        else:\r\n            print(\"FAIL: iterative fib(\" + str(n) + \") = \" + str(result) + \", expected \" + str(expected))\r\n        i = i + 1\r\n\r\n    print(\"\")\r\n    print(\"Testing Optimized Implementation:\")\r\n    print(\"-\" * 50)\r\n\r\n    i = 0\r\n    while i < len(test_inputs):\r\n        n = test_inputs[i]\r\n        expected = test_expected[i]\r\n        result = fibonacci_optimized(n)\r\n\r\n        if result == expected:\r\n            print(\"PASS: optimized fib(\" + str(n) + \") = \" + str(result))\r\n            optimized_passed = optimized_passed + 1\r\n        else:\r\n            print(\"FAIL: optimized fib(\" + str(n) + \") = \" + str(result) + \", expected \" + str(expected))\r\n        i = i + 1\r\n\r\n    return recursive_passed + iterative_passed + optimized_passed\r\n\r\ndef test_edge_cases():\r\n    print(\"\")\r\n    print(\"=== Edge Cases and Error Handling ===\")\r\n    print(\"-\" * 50)\r\n\r\n    edge_cases_passed = 0\r\n\r\n    zero_test = fibonacci_iterative(0)\r\n    if zero_test == 0:\r\n        print(\"PASS: Edge case fib(0) = 0\")\r\n        edge_cases_passed = edge_cases_passed + 1\r\n    else:\r\n        print(\"FAIL: Edge case fib(0) failed\")\r\n\r\n    one_test = fibonacci_iterative(1)\r\n    if one_test == 1:\r\n        print(\"PASS: Edge case fib(1) = 1\")\r\n        edge_cases_passed = edge_cases_passed + 1\r\n    else:\r\n        print(\"FAIL: Edge case fib(1) failed\")\r\n\r\n    return edge_cases_passed\r\n\r\ndef test_performance_scenarios():\r\n    print(\"\")\r\n    print(\"=== Performance Test Scenarios ===\")\r\n    print(\"-\" * 50)\r\n\r\n    performance_passed = 0\r\n\r\n    large_n = 25\r\n    result_iterative = fibonacci_iterative(large_n)\r\n    result_optimized = fibonacci_optimized(large_n)\r\n\r\n    print(\"Computing fibonacci(\" + str(large_n) + \"):\")\r\n    print(\"Iterative result: \" + str(result_iterative))\r\n    print(\"Optimized result: \" + str(result_optimized))\r\n\r\n    if result_iterative == result_optimized:\r\n        print(\"PASS: Performance implementations agree\")\r\n        performance_passed = performance_passed + 1\r\n    else:\r\n        print(\"FAIL: Performance implementations disagree\")\r\n\r\n    very_large_n = 30\r\n    very_large_result = fibonacci_optimized(very_large_n)\r\n    print(\"fibonacci(\" + str(very_large_n) + \") = \" + str(very_large_result))\r\n\r\n    if very_large_result == 832040:\r\n        print(\"PASS: Large number test fibonacci(30) = 832040\")\r\n        performance_passed = performance_passed + 1\r\n    else:\r\n        print(\"FAIL: Large number test failed\")\r\n\r\n    return performance_passed\r\n\r\ndef test_consistency():\r\n    print(\"\")\r\n    print(\"=== Cross-Implementation Consistency ===\")\r\n    print(\"-\" * 50)\r\n\r\n    consistency_passed = 0\r\n    test_values = [5, 8, 12, 15]\r\n\r\n    i = 0\r\n    while i < len(test_values):\r\n        n = test_values[i]\r\n\r\n        if n <= 10:\r\n            recursive_result = fibonacci_recursive(n)\r\n        else:\r\n            recursive_result = -1\r\n\r\n        iterative_result = fibonacci_iterative(n)\r\n        optimized_result = fibonacci_optimized(n)\r\n\r\n        print(\"fibonacci(\" + str(n) + \"):\")\r\n        if recursive_result != -1:\r\n            print(\"  Recursive: \" + str(recursive_result))\r\n        print(\"  Iterative: \" + str(iterative_result))\r\n        print(\"  Optimized: \" + str(optimized_result))\r\n\r\n        if iterative_result == optimized_result:\r\n            if recursive_result == -1 || recursive_result == iterative_result:\r\n                print(\"  PASS: All implementations consistent\")\r\n                consistency_passed = consistency_passed + 1\r\n            else:\r\n                print(\"  FAIL: Recursive disagrees with others\")\r\n        else:\r\n            print(\"  FAIL: Iterative and optimized disagree\")\r\n\r\n        i = i + 1\r\n\r\n    return consistency_passed\r\n\r\ndef generate_fibonacci_sequence(count: int):\r\n    print(\"\")\r\n    print(\"=== Fibonacci Sequence Generation ===\")\r\n    print(\"-\" * 50)\r\n\r\n    print(\"First \" + str(count) + \" Fibonacci numbers:\")\r\n\r\n    sequence = \"\"\r\n    i = 0\r\n    while i < count:\r\n        fib_num = fibonacci_iterative(i)\r\n        if i == 0:\r\n            sequence = str(fib_num)\r\n        else:\r\n            sequence = sequence + \", \" + str(fib_num)\r\n        i = i + 1\r\n\r\n    print(sequence)\r\n\r\n    expected_start = \"0, 1, 1, 2, 3, 5, 8, 13, 21, 34\"\r\n    if count >= 10:\r\n        actual_start = \"\"\r\n        i = 0\r\n        while i < 10:\r\n            fib_num = fibonacci_iterative(i)\r\n            if i == 0:\r\n                actual_start = str(fib_num)\r\n            else:\r\n                actual_start = actual_start + \", \" + str(fib_num)\r\n            i = i + 1\r\n\r\n        if actual_start == expected_start:\r\n            print(\"PASS: Sequence generation correct\")\r\n            return 1\r\n        else:\r\n            print(\"FAIL: Sequence generation incorrect\")\r\n            return 0\r\n\r\n    return 1\r\n\r\ndef main():\r\n    print(\"Starting Complete Fibonacci Algorithm Test Suite\")\r\n    print(\"=\" * 60)\r\n\r\n    implementations_passed = test_all_implementations()\r\n    edge_cases_passed = test_edge_cases()\r\n    performance_passed = test_performance_scenarios()\r\n    consistency_passed = test_consistency()\r\n    sequence_passed = generate_fibonacci_sequence(15)\r\n\r\n    total_passed = implementations_passed + edge_cases_passed + performance_passed + consistency_passed + sequence_passed\r\n\r\n    print(\"\")\r\n    print(\"=\" * 60)\r\n    print(\"FINAL TEST SUMMARY\")\r\n    print(\"=\" * 60)\r\n    print(\"Total tests passed: \" + str(total_passed))\r\n    print(\"\")\r\n    print(\"Test Categories:\")\r\n    print(\"- Implementation tests: \" + str(implementations_passed) + \" passed\")\r\n    print(\"- Edge case tests: \" + str(edge_cases_passed) + \" passed\")\r\n    print(\"- Performance tests: \" + str(performance_passed) + \" passed\")\r\n    print(\"- Consistency tests: \" + str(consistency_passed) + \" passed\")\r\n    print(\"- Sequence tests: \" + str(sequence_passed) + \" passed\")\r\n\r\n    if total_passed >= 35:\r\n        print(\"\")\r\n        print(\"SUCCESS: Comprehensive Fibonacci testing completed!\")\r\n        print(\"All implementations working correctly.\")\r\n    else:\r\n        print(\"\")\r\n        print(\"WARNING: Some tests failed. Review results above.\")\r\n\r\n    print(\"\")\r\n    print(\"Testing concluded.\")\r\n\r\nmain()\r\n"],"version":3}