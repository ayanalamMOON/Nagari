"""
Fibonacci series implementation and tests in Nagari
"""

def fibonacci_recursive(n: int) -> int:
    """
    Calculate the nth Fibonacci number using recursion
    """
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)

def fibonacci_iterative(n: int) -> int:
    """
    Calculate the nth Fibonacci number using iteration (more efficient)
    """
    if n <= 0:
        return 0
    elif n == 1:
        return 1

    a, b = 0, 1
    for i in range(2, n + 1):
        a, b = b, a + b

    return b

def fibonacci_sequence(count: int) -> list:
    """
    Generate a sequence of Fibonacci numbers
    """
    if count <= 0:
        return []
    elif count == 1:
        return [0]
    elif count == 2:
        return [0, 1]

    sequence = [0, 1]
    for i in range(2, count):
        sequence.append(sequence[i-1] + sequence[i-2])

    return sequence

def test_fibonacci():
    """
    Test the Fibonacci implementations
    """
    print("Testing Fibonacci implementations...")

    # Test cases
    test_cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

    print("\nTesting recursive implementation:")
    for i, n in enumerate(test_cases):
        result = fibonacci_recursive(n)
        expected_result = expected[i]
        status = "✓" if result == expected_result else "✗"
        print(f"  fibonacci_recursive({n}) = {result} (expected: {expected_result}) {status}")

    print("\nTesting iterative implementation:")
    for i, n in enumerate(test_cases):
        result = fibonacci_iterative(n)
        expected_result = expected[i]
        status = "✓" if result == expected_result else "✗"
        print(f"  fibonacci_iterative({n}) = {result} (expected: {expected_result}) {status}")

    print("\nTesting sequence generation:")
    sequence_10 = fibonacci_sequence(10)
    expected_sequence = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    status = "✓" if sequence_10 == expected_sequence else "✗"
    print(f"  fibonacci_sequence(10) = {sequence_10}")
    print(f"  Expected: {expected_sequence} {status}")

    # Performance comparison for larger numbers
    print("\nPerformance comparison (fibonacci(20)):")
    n = 20

    # Iterative (fast)
    result_iterative = fibonacci_iterative(n)
    print(f"  Iterative: fibonacci({n}) = {result_iterative}")

    # Recursive (slower but demonstrates algorithm)
    result_recursive = fibonacci_recursive(n)
    print(f"  Recursive: fibonacci({n}) = {result_recursive}")

    # Verify they match
    status = "✓" if result_iterative == result_recursive else "✗"
    print(f"  Results match: {status}")

    print("\nFibonacci sequence demonstration:")
    print("First 15 Fibonacci numbers:")
    sequence_15 = fibonacci_sequence(15)
    print(sequence_15)

def main():
    """
    Main function to run the Fibonacci tests
    """
    print("Fibonacci Series Test in Nagari")
    print("=" * 40)

    test_fibonacci()

    print("\n" + "=" * 40)
    print("Test completed!")

if __name__ == "__main__":
    main()
